name: cicd
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - LICENSE
      - '*.pdf'

  workflow_dispatch:

concurrency:
  group: only-one

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      -
        name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.45.2
          args: --disable-all --enable=vet,gofmt,errcheck,misspell,deadcode --deadline=240s
          working-directory: .

  build-test:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        # BuildKit (used with `docker buildx`) is the best way to build images
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build test docker image
        uses: docker/build-push-action@v2
        with:
          push: false
          # Export to Docker Engine so it will be available by other steps within same job.
          # Reusing via other job requires either docker registry or build artifacts and is slower.
          load: true
          tags: ${{ github.run_id }}
          # This is the empty test target we have in our docker file
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      -
        name: Run unit tests
        run: |
          docker run --rm ${{ github.run_id }} go test ./... -race -count 1 -v
        shell:
          bash

  push:
    runs-on: ubuntu-latest
    needs: [lint, build-test]
    outputs:
      image-tag: ${{ fromJSON(steps.docker_meta.outputs.json).labels['org.opencontainers.image.version'] }}
    steps:
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1   
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: rafarlopes/cicd-example
          flavor: latest=true
          tags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=short
      -
        name: Docker Build and Push
        id: build_image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          # it uses github cache API for faster builds:
          # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#cache-backend-api
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: push
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Deploy to development
        uses: ./.github/actions/deploy-application
        with:
          application: cicd-example
          deployment-repo: example-deployment
          environment: development
          branch: development
          image-tag: ${{ needs.push.outputs.image-tag }}
          github-token: ${{ secrets.GH_TOKEN }}

  e2e-tests-dev:
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Run E2E tests against development
        uses: ./.github/actions/run-e2e-tests
        with:
          test-repo: cicd-example-e2e-tests
          endpoint: ${{ secrets.DEV_ENDPOINT }}
          github-token: ${{ secrets.GH_TOKEN }}

  deploy-stage:
    runs-on: ubuntu-latest
    needs: [push, e2e-tests-dev]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Deploy to stage
        uses: ./.github/actions/deploy-application
        with:
          application: cicd-example
          deployment-repo: example-deployment
          environment: stage
          branch: stage
          image-tag: ${{ needs.push.outputs.image-tag }}
          github-token: ${{ secrets.GH_TOKEN }}

  e2e-tests-stage:
    runs-on: ubuntu-latest
    needs: deploy-stage
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Run E2E tests against stage
        uses: ./.github/actions/run-e2e-tests
        with:
          test-repo: cicd-example-e2e-tests
          endpoint: ${{ secrets.STAGE_ENDPOINT }}
          github-token: ${{ secrets.GH_TOKEN }}

  pull-request-prod:
    runs-on: ubuntu-latest
    needs: [push, e2e-tests-stage]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Create release branch for production
        uses: ./.github/actions/deploy-application
        with:
          application: cicd-example
          deployment-repo: example-deployment
          environment: production
          branch: "releases/production-${{ github.run_id }}"
          image-tag: ${{ needs.push.outputs.image-tag }}
          github-token: ${{ secrets.GH_TOKEN }}
      -
        name: Get latest release
        id: latest-release
        uses: rafarlopes/get-latest-pre-release-tag-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          repository: cicd-example
      -
        name: Delete existing pre-release and associated tag
        if: ${{ steps.latest-release.outputs.tag != '' }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh release delete ${{ steps.latest-release.outputs.tag }} --yes
          git push --delete origin ${{ steps.latest-release.outputs.tag }}
          echo "deleted tag and release: ${{ steps.latest-release.outputs.tag }}"
      -
        name: Create new pre-release
        id: new-release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          TAG=$(date +'%Y%m%d%H%M%S')
          gh release create $TAG --prerelease --generate-notes
          echo "::set-output name=tag::$TAG"
      -
        name: Create pull request for production
        shell: bash
        working-directory: example-deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          BODY=$(gh release view ${{ steps.new-release.outputs.tag }} --repo "${{ github.repository }}" --json body --jq '.body')
          gh pr create \
            --title "cicd-example: deploy to production version ${{ needs.push.outputs.image-tag }}" \
            --body "$BODY" \
            --label "app=cicd-example" \
            --base "production" \
            --assignee "${{ github.actor }}" \
            --reviewer "${{ github.actor }}"
